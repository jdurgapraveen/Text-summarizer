
from nltk.corpus import stopwords as sw
from nltk.stem import PorterStemmer as ps
from nltk.tokenize import word_tokenize, sent_tokenize

text_string = '''
After slinking in by the dead of night as Chief Minister of Maharashtra, Devendra Fadnavis quit three days later on Tuesday, unable to withstand the test by the light of day. He claimed the moral high ground as he resigned ahead of imminent ouster in a floor test in the State Assembly. The BJP’s brazen usurpation of power left a trail of vandalised norms and precedents, and will continue to rankle, but the fact that it was not allowed to stand is a tribute to India’s constitutional order, despite its inadequacies. The Supreme Court acted with the deserving urgency, to “protect democratic values” as it said. It laid down the rules and timelines; ring-fenced the floor test and pre-empted manipulation. It observed that when “there is a possibility of horse trading, it becomes incumbent upon the Court to act”. There is no grace in Mr. Fadnavis’s exit; only relief that the nation has been spared more ugly spectacles. The Shiv Sena-Nationalist Congress Party-Congress alliance will now test its majority after forming the government. NCP leader Ajit Pawar’s dramatic return to the fold after a scandalous short-lived dalliance with the BJP probably will never be satisfactorily explained.

The top court’s order is interim and substantive questions thrown up by the series of events leading up to the swearing-in of Mr. Fadnavis will be adjudicated later. The tactics the BJP employed to seize power in the State were breathtaking in their insolence, though not entirely unprecedented. The Governor used his discretion in a blatantly partisan manner to foist a government based on dubious claims of numbers, while denying the opportunity to the coalition. The Centre, scripting and acting out the drama, rushed through the procedure to withdraw President’s rule — all done in a cloak-and-dagger manner. The Governor is constitutionally authorised to appoint a Chief Minister. The assumed limits of this authority are being breached with alarming frequency and extent by partisan Governors, acting merely as tools in political schemes. Given this context, there is a need to define in clearer terms the boundaries of the Governor’s use of discretion in inviting a party to form a government. President Ram Nath Kovind’s call for constitutional morality among all organs of the state and persons holding constitutional posts, during Constitution Day celebrations in Parliament on Tuesday, was appropriate. It was also ironic, as it followed the court’s order which called into question the propriety and intention of the Centre and the Governor. Constitutional morality was violated by those entrusted to guard it. The BJP’s nocturnal capture of power in Maharashtra was a dispiriting episode in Indian democracy. The court order and the subsequent resignation of Mr. Fadnavis offer hope that India’s constitutional order will force its caretakers to behave.


'''

def frequency_table(text_string) -> dict:
    """
    Dictionary created for word frequency table, prerequisite is after elimination of stopwords and find some root words.
   
    """
    stopWords = set(sw.words("english"))
    words = word_tokenize(text_string)
    ps = PorterStemmer()

    freqTable = dict()
    for word in words:
        word = ps.stem(word)
        if word in stopWords:
            continue
        if word in freqTable:
            freqTable[word] += 1
        else:
            freqTable[word] = 1

    return freqTable


def score_sentences(sentences, freqTable) -> dict:
    """
    Score a sentence = frequency of every non-stop word in a sentence/total no of words in a sentence
   
    """

    sentenceValue = dict()

    for sentence in sentences:
        word_count_in_sentence = (len(word_tokenize(sentence)))
        word_count_in_sentence_except_stop_words = 0
        for wordValue in freqTable:
            if wordValue in sentence.lower():
                word_count_in_sentence_except_stop_words += 1
                if sentence[:10] in sentenceValue:
                    sentenceValue[sentence[:10]] += freqTable[wordValue]
                else:
                    sentenceValue[sentence[:10]] = freqTable[wordValue]

        if sentence[:10] in sentenceValue:
            sentenceValue[sentence[:10]] = sentenceValue[sentence[:10]] / word_count_in_sentence_except_stop_words

       
    return sentenceValue


def average_score(sentenceValue) -> int:
    """
    Find the average score from the sentence value dictionary
       """
    sumValues = 0
    for entry in sentenceValue:
        sumValues += sentenceValue[entry]

    # Average value of a sentence from original text
    average = (sumValues / len(sentenceValue))

    return average


def generate_summary(sentences, sentenceValue, threshold):
    sentence_count = 0
    summary = ''

    for sentence in sentences:
        if sentence[:10] in sentenceValue and sentenceValue[sentence[:10]] >= (threshold):
            summary += " " + sentence
            sentence_count += 1

    return summary


def summarization(text):
    # 1 Tokenize the sentences
    sentences = sent_tokenize(text)
    
    # 2 Create the word frequency table
    freq_table = frequency_table(text)

    # 3 score the sentences
    sentence_scores = score_sentences(sentences, freq_table)

    # 4 Find the threshold
    threshold = average_score(sentence_scores)

    # 5 Generate the summary
    summary = generate_summary(sentences, sentence_scores, 0.7 * threshold)

    return summary


if __name__ == '__main__':
    output = summarization(text_string)
    print(output)
